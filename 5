package mergesort;
import
java.util.Random;
import
java.util.Scanner;
public class MergeSort
{
int[] a;
int
num;
Random rm=new Random();
private MergeSort(int n)
{
this.num=n;
this.a=new
int[n];
}
void dataInput()
{
for(int i=0;i<num;i++)
{
a[i]=rm.nextInt(num-1)+1;
}
}
void merge(int low,int mid,int high)
{
int i,j,h,k;
int[] b=new int
[a.length]; i=h=low;
j=mid+1;
while(i<=mid && j<=high)
{
if(a[i]<=a[j])
b[h++]=a[i++];
else
b[h++]=a[j++];
}
if(i>mid)
{
for(k=j;k<=high;k+
+) b[h++]=a[k];
}
else
{
for(k=i;k<=mid;k+
+) b[h++]=a[k];
}
for(k=low;k<=high;k+
+) a[k]=b[k];
}
void msort(int low,int high)
{
int mid;
if(low<hig
h)
{
mid=(low+high)/2;
msort(low,mid);
msort(mid+1,high);
merge(low,mid,hig
h);
}
}
void display()
{
for(int i=0;i<num;i++)
{
System.out.println(a[i]);
}
}
public static void main(String[] args)
{
int n;
Scanner in=new Scanner(System.in);
System.out.println("Enter the value of
n>5000"); n=in.nextInt();
MergeSort m=new MergeSort(n);
m.dataInput();
System.out.println("****Before Sort****");
m.display();
long startTime=System.nanoTime();
m.msort(0,n-1);
System.out.println("\n****After Sort****");
long stopTime=System.nanoTime();
m.display();
float elapsedTime=(float)((stopTime-startTime)/Math.pow(10,6));
System.out.println("the complexity : "+elapsedTime+"ms");
}
}
